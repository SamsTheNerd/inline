plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.9.+" apply false
//    id "org.jetbrains.kotlin.jvm" version "1.7.10" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
//    apply plugin: "org.jetbrains.kotlin.jvm"

//    loom {
//        silentMojangMappingsLicense()
//
//        mixin {
//            // the default name includes both archivesName and the subproject, resulting in the platform showing up twice
//            // default: hexdebug-common-Common-refmap.json
//            // fixed:   hexdebug-common.refmap.json
//            defaultRefmapName = "${base.archivesName.get()}.refmap.json"
//        }
//    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
        }


        // Required for mixin annotation processor
        annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
        annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
        annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
        annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
        annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version

    boolean publishMavenRelease = System.getenv("PUBLISH_MAVEN_RELEASE") == "true"
    String buildNum = System.getenv('BUILD_NUMBER')
    if (!publishMavenRelease && buildNum != null) {
        version += "-" + buildNum
    }
    group = rootProject.maven_group

    repositories {
        flatDir {
            name="localModLibs"
            dir 'libs'
        }
        mavenCentral()
        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases'
        }
        maven { url "https://maven.terraformersmc.com/" }
        maven { url "https://maven.terraformersmc.com/releases" }
        maven { url "https://maven.shedaniel.me/" }
        // stuff below here is only needed for interop testing
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
//
//        maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
//        maven { url = "https://maven.tterrag.com/" } // Flywheel
//        maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
//        maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
//        maven { url = "https://mvn.devos.one/releases/" } // Porting Lib Releases
//        maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }
}

ext.trimChangelog = { changelogString -> 
    String changelogSec = ""
    def lines = changelogString.split("\n")
    Boolean going = false;
    for (String line : lines){
        if (line.startsWith("##") && !line.startsWith("###")){
            if(going)
                break
            going = true;
        }
        if(going){
            changelogSec += (line + "\n")
        }
    }
    // println(changelogSec)
    return changelogSec
}