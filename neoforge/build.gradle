plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

archivesBaseName = "${archivesBaseName}-neoforge"

architectury {
    platformSetupLoomIde()
    neoForge()

}
//
//loom {
//    neoForge {
//        mixinConfig "inline-forge.mixins.json"
//        mixinConfig "inline-common.mixins.json"
//    }
//}

tasks {
    tasks.withType(Jar).configureEach {
        exclude("architectury.common.json")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

tasks.register("jenkinsArtifacts", Copy){
    from remapJar, remapSourcesJar, javadocJar
    into "${rootDir.toPath()}/build/jenkinsArtifacts"
}

build {
    dependsOn tasks.named("jenkinsArtifacts")
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modApi "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    modCompileOnly(group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2') // for @Nonnull

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    components {
        withModule("org.lwjgl:lwjgl-nanovg") {

            ['windows', 'macos', 'linux', 'macos-arm64', 'linux-arm64', 'linux-arm32'].each { featureRoot ->
                addVariant("natives-${featureRoot}-elements", "runtime") {
                    withFiles {
                        removeAllFiles()
                        addFile("${id.name}-${id.version}-natives-${featureRoot}.jar")
                    }
                    withDependencies { clear() }
                    withCapabilities {
                        removeCapability(id.group, id.name)
                        addCapability(id.group, "${id.name}-natives-${featureRoot}", id.version)
                    }
                }
            }
        }
    }

//    implementation('org.lwjgl:lwjgl-nanovg:3.3.3')
    implementation('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-windows') } }
    implementation('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-macos') } }
    implementation('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-linux') } }
    implementation('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-macos-arm64') } }
    implementation('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-linux-arm64') } }
    implementation('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-linux-arm32') } }

    forgeRuntimeLibrary 'org.lwjgl:lwjgl-nanovg:3.3.3'
    forgeRuntimeLibrary ("org.lwjgl:lwjgl-nanovg:3.3.3") { capabilities { requireFeature('natives-windows') } }
    forgeRuntimeLibrary ("org.lwjgl:lwjgl-nanovg:3.3.3") { capabilities { requireFeature('natives-macos') } }
    forgeRuntimeLibrary ("org.lwjgl:lwjgl-nanovg:3.3.3") { capabilities { requireFeature('natives-linux') } }
    forgeRuntimeLibrary ("org.lwjgl:lwjgl-nanovg:3.3.3") { capabilities { requireFeature('natives-macos-arm64') } }
    forgeRuntimeLibrary ("org.lwjgl:lwjgl-nanovg:3.3.3") { capabilities { requireFeature('natives-linux-arm64') } }
    forgeRuntimeLibrary ("org.lwjgl:lwjgl-nanovg:3.3.3") { capabilities { requireFeature('natives-linux-arm32') } }

    include "org.lwjgl:lwjgl-nanovg:3.3.3"
    include ('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-windows') } }
    include ('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-macos') } }
    include ('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-linux') } }
    include ('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-macos-arm64') } }
    include ('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-linux-arm64') } }
    include ('org.lwjgl:lwjgl-nanovg:3.3.3') { capabilities { requireFeature('natives-linux-arm32') } }
}

processResources {
    inputs.property "mod_version", project.mod_version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "mod_version": project.mod_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}


publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = trimChangelog(file("$rootDir/changelog.md").text)
    type = STABLE
    modLoaders.add("neoforge")

    version = project.version + "-neoforge"
    displayName = "Inline" + " " + project.version + " [NeoForge]"
 
    curseforge {
        accessToken = System.getenv("CURSEFORGE_API_KEY")
        projectId = project.inline_curseforge_id
        minecraftVersions.add(project.minecraft_version)

        requires{
            slug = "cloth-config"
        }
    }

    modrinth {
        accessToken = System.getenv("MODRINTH_API_KEY")
        projectId = project.inline_modrinth_slug
        minecraftVersions.add(project.minecraft_version)

        requires{
            slug = "cloth-config"
        }
    }
}