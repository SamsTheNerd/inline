architectury {
    common(rootProject.enabled_platforms.split(","))
}

archivesBaseName = "${archivesBaseName}-common"

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel.cloth:cloth-config:${rootProject.cloth_config_version}"

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2' // for @Nonnull

}

tasks.register("jenkinsArtifacts", Copy){
    from remapJar, remapSourcesJar, javadocJar
    into "${rootDir.toPath()}/build/jenkinsArtifacts"
}

build {
    dependsOn tasks.named("jenkinsArtifacts")
}


tasks.register("javadocExtras", Copy){
    from "${rootDir.toPath()}/javadocextras"
    into "${rootDir.toPath()}/common/build/docs/javadoc"
}

// gradle yells at me without this
javadocJar{
    dependsOn tasks.named("javadocExtras")
}

javadoc{
    options.stylesheetFile = new File("${rootDir.toPath()}/javadocstyle.css");
    include "com/samsthenerd/inline/api/**/*.java"
    include "com/samsthenerd/inline/tooltips/**/*.java"
    include "com/samsthenerd/inline/utils/**/*.java"
    finalizedBy = [tasks.named("javadocExtras")];
}


publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}
